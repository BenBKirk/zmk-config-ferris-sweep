#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        right-enter {
            bindings = <&kp ENTER>;
            key-positions = <28 27>;
        };

        right-tab {
            bindings = <&kp TAB>;
            key-positions = <7 8>;
        };

        left-escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        left-caps-word {
            bindings = <&caps_word>;
            key-positions = <21 22>;
        };

        workspace_1 {
            bindings = <&kp LG(NUMBER_1)>;
            key-positions = <32 26>;
        };

        workspace_2 {
            bindings = <&kp LG(NUMBER_2)>;
            key-positions = <32 27>;
        };

        workspace_3 {
            bindings = <&kp LG(NUMBER_3)>;
            key-positions = <32 28>;
        };

        workspace_4 {
            bindings = <&kp LG(NUMBER_4)>;
            key-positions = <32 16>;
        };

        workspace_5 {
            bindings = <&kp LG(NUMBER_5)>;
            key-positions = <32 17>;
        };

        workspace_6 {
            bindings = <&kp LG(NUMBER_6)>;
            key-positions = <32 18>;
        };

        workspace_7 {
            bindings = <&kp LG(NUMBER_7)>;
            key-positions = <32 6>;
        };

        workspace_8 {
            bindings = <&kp LG(NUMBER_8)>;
            key-positions = <32 7>;
        };

        workspace_9 {
            bindings = <&kp LG(NUMBER_9)>;
            key-positions = <32 8>;
        };

        left-shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <13 12>;
        };

        left-gui {
            bindings = <&sk LEFT_GUI>;
            key-positions = <10 11>;
        };

        left-ctl {
            bindings = <&sk LCTRL>;
            key-positions = <11 12>;
        };

        left-alt {
            bindings = <&sk LEFT_ALT>;
            key-positions = <23 22>;
        };

        left-bootloader {
            bindings = <&bootloader>;
            key-positions = <10 11 12 13>;
        };

        right-bootloader {
            bindings = <&bootloader>;
            key-positions = <16 17 18 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y           &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G        &kp H           &kp J  &kp K      &kp L    &kp SQT
&kp Z  &kp X  &kp C  &kp V  &kp B        &kp N           &kp M  &kp COMMA  &kp DOT  &kp FSLH
                     &mo 1  &kp SPACE    &kp LEFT_SHIFT  &mo 2
            >;
        };

        num {
            bindings = <
&none           &none         &none      &none         &none     &none         &kp N7  &kp N8  &kp N9  &kp DELETE
&kp LEFT_SHIFT  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_GUI  &none     &none         &kp N4  &kp N5  &kp N6  &kp BACKSPACE
&none           &none         &none      &none         &none     &kp NUMBER_0  &kp N1  &kp N2  &kp N3  &kp ENTER
                                         &trans        &trans    &trans        &mo 3
            >;
        };

        sym {
            bindings = <
&kp ESCAPE  &kp HOME       &kp UP     &kp END    &kp TAB          &none   &none         &none      &none         &none
&kp LBKT    &kp LEFT       &kp DOWN   &kp RIGHT  &kp SEMICOLON    &none   &kp LEFT_GUI  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_SHIFT
&kp RBKT    &kp BACKSLASH  &kp GRAVE  &kp MINUS  &kp EQUAL        &none   &none         &none      &none         &none
                                      &mo 3      &trans           &trans  &trans
            >;
        };

        nav {
            bindings = <
&none       &none  &none  &none   &none     &none   &none         &none         &none         &none
&none       &none  &none  &none   &none     &none   &bt BT_SEL 3  &bt BT_SEL 4  &none         &none
&bt BT_CLR  &none  &none  &none   &none     &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none
                          &trans  &trans    &trans  &trans
            >;
        };
    };
};
