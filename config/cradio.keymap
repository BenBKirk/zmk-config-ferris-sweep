#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        right-enter {
            bindings = <&kp ENTER>;
            key-positions = <28 27>;
        };

        right-tab {
            bindings = <&kp TAB>;
            key-positions = <7 8>;
        };

        left-escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        left-caps-word {
            bindings = <&caps_word>;
            key-positions = <21 22>;
        };

        left-shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <20 21>;
        };

        right-shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <29 28>;
        };

        workspace_1 {
            bindings = <&kp LG(NUMBER_1)>;
            key-positions = <32 26>;
        };

        workspace_2 {
            bindings = <&kp LG(NUMBER_2)>;
            key-positions = <32 27>;
        };

        workspace_3 {
            bindings = <&kp LG(NUMBER_3)>;
            key-positions = <32 28>;
        };

        workspace_4 {
            bindings = <&kp LG(NUMBER_4)>;
            key-positions = <32 16>;
        };

        workspace_5 {
            bindings = <&kp LG(N5)>;
            key-positions = <32 17>;
        };

        workspace_6 {
            bindings = <&kp LG(NUMBER_6)>;
            key-positions = <32 18>;
        };

        workspace_7 {
            bindings = <&kp LG(N7)>;
            key-positions = <32 6>;
        };

        workspace_8 {
            bindings = <&kp LG(N8)>;
            key-positions = <32 7>;
        };

        workspace_9 {
            bindings = <&kp LG(N9)>;
            key-positions = <32 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y          &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G        &kp H          &kp J  &kp K      &kp L    &kp SQT
&kp Z  &kp X  &kp C  &kp V  &kp B        &kp N          &kp M  &kp COMMA  &kp DOT  &kp FSLH
                     &mo 2  &kp SPACE    &kp BACKSPACE  &mo 1
            >;
        };

        num {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp KP_EQUAL  &kp N7  &kp N8  &kp N9  &kp MINUS
&trans        &trans        &trans        &trans        &trans          &kp ASTRK     &kp N4  &kp N5  &kp N6  &kp PLUS
&trans        &trans        &trans        &trans        &trans          &kp NUMBER_0  &kp N1  &kp N2  &kp N3  &kp SLASH
                                          &mo 3         &trans          &trans        &trans
            >;
        };

        sym {
            bindings = <
&kp GRAVE      &trans      &kp LS(UNDER)  &kp MINUS     &kp LS(PLUS)    &kp LS(AT)   &kp LS(AMPS)   &kp DOT        &kp LS(PRCNT)  &kp BSLH
&kp LS(CARET)  &kp LS(LT)  &kp LS(LBRC)   &kp LS(LPAR)  &kp LBKT        &kp SQT      &kp LS(QMARK)  &kp LS(COLON)  &kp LS(TILDE)  &kp LS(PIPE)
&kp BSLH       &kp LS(GT)  &kp LS(RBRC)   &kp LS(RPAR)  &kp RBKT        &kp LS(DQT)  &kp LS(EXCL)   &kp SEMI       &kp POUND      &kp FSLH
                                          &trans        &trans          &kp DEL      &mo 3
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &kp HOME  &kp UP    &kp END    &trans
&trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans    &trans     &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
